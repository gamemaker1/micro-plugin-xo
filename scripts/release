#!/bin/bash

# release
# A script to create a new release for this plugin

# Requires the following to be installed:
# - `git`: Git CLI
# - `gh`: Github CLI
# - `jq`: Command line JSON manipulation
# - `zip`: ZIP file creation

# The new version must be passed as the first argument
if [[ -z "$1" ]]; then
	echo "[error] Please pass the new version as the first argument"
	exit 1
fi

# The plugin name
plugin_name="xo"
# The new version
plugin_version="$1"
# The GitHub repo
github_repo="gamemaker1/micro-plugin-xo"
# The GitHub remote
github_remote="origin"
# The GitHub branch
github_branch="main"
# Space-separated list of lua files
source_files=("source/xo.lua")
# Help file
help_file="readme.md"
# The metadata file (should ALWAYS be /repo.json)
metadata_file="repo.json"

# Ensure that there are no unstaged changes
if ! [[ -z "$(git status --porcelain)" ]]; then
	echo "[error] Please commit all changes before creating a new release"
	exit 1
fi

# Change the version in the source file
sed -i "s/^VERSION = .*/VERSION = \"$plugin_version\"/" "${source_files[@]}"

# Add a new entry to `repo.json`
cat "$metadata_file" | jq ".[0].Versions += [
	{
		\"Version\": \"$plugin_version\",
		\"Url\": \"https://github.com/$github_repo/releases/download/$plugin_version/$plugin_name.zip\",
		\"Require\": {
			\"micro\": \">=1.0.3\"
		}
	}
]" --indent 2 | tee "$metadata_file"

echo "[info] Updated version to $plugin_version"

# Commit the changes
git add .
git commit -m "chore(release): $plugin_version"
# Tag the commit
git tag "$plugin_version"

echo "[info] Created and tagged commit"

# Push the commit and tag to GitHub
git push -f "$github_remote" "$github_branch"
git push -f "$github_remote" "$plugin_version"

echo "[info] Pushed to Github"

# Create a zip file with files needed by Micro
rm -rf build/
mkdir -p build/help && cd build/
cp "../$metadata_file" "./repo.json"
cp "../$help_file" "./help/$plugin_name.md"
for file in "${source_files[@]}"; do
	cp "../$file" "./"
done
zip -qr9 "$plugin_name.zip" ./*
cd ..

echo "[info] Created distributable zip"

# Create a Github Release with the created file
gh release create "$plugin_version" "build/$plugin_name.zip" -t "$plugin_version" --notes "See the readme for instructions on how to install, use and configure the plugin. Thanks for using!"

echo "[info] Created a new release ($plugin_version)!"

# Open the release in the browser so we can add the change notes
gh release view -w $plugin_version
